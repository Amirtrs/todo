{"version":3,"sources":["components/TodoTextInput.js","components/Header.js","constants/ActionTypes.js","actions/index.js","containers/Header.js","components/Link.js","containers/FilterLink.js","constants/TodoFilters.js","components/Footer.js","components/TodoItem.js","components/TodoList.js","selectors/index.js","containers/VisibleTodoList.js","components/MainSection.js","containers/MainSection.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["TodoTextInput","Component","state","text","this","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","render","className","classnames","edit","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Header","addTodo","length","deleteTodo","id","editTodo","completeTodo","completeAllTodos","clearCompleted","setVisibilityFilter","filter","connect","Link","active","children","setFilter","selected","style","cursor","onClick","ownProps","visibilityFilter","dispatch","FILTER_TITLES","Footer","activeCount","completedCount","onClearCompleted","itemWord","Object","keys","map","key","FilterLink","TodoItem","handleDoubleClick","handleSave","todo","element","checked","completed","onDoubleClick","TodoList","filteredTodos","actions","getTodos","todos","getVisibleTodos","createSelector","t","Error","getCompletedTodoCount","reduce","count","VisibleTodoList","bindActionCreators","TodoActions","MainSection","todosCount","readOnly","App","initialState","action","rootReducer","combineReducers","maxId","Math","max","areAllMarked","every","store","createStore","reducer","document","getElementById"],"mappings":"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","file":"static/js/main.117794c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  }\n\n  state = {\n    text: this.props.text || ''\n  }\n\n  handleSubmit = e => {\n    const text = e.target.value.trim()\n    if (e.which === 13) {\n      this.props.onSave(text)\n      if (this.props.newTodo) {\n        this.setState({ text: '' })\n      }\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ text: e.target.value })\n  }\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value)\n    }\n  }\n\n  render() {\n    return (\n      <input className={\n        classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit} />\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoTextInput from './TodoTextInput'\n\nconst Header = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text)\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n)\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default Header\n","export const ADD_TODO = 'ADD_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const COMPLETE_TODO = 'COMPLETE_TODO'\nexport const COMPLETE_ALL_TODOS = 'COMPLETE_ALL_TODOS'\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n","import * as types from '../constants/ActionTypes'\n\nexport const addTodo = text => ({ type: types.ADD_TODO, text })\nexport const deleteTodo = id => ({ type: types.DELETE_TODO, id })\nexport const editTodo = (id, text) => ({ type: types.EDIT_TODO, id, text })\nexport const completeTodo = id => ({ type: types.COMPLETE_TODO, id })\nexport const completeAllTodos = () => ({ type: types.COMPLETE_ALL_TODOS })\nexport const clearCompleted = () => ({ type: types.CLEAR_COMPLETED })\nexport const setVisibilityFilter = filter => ({ type: types.SET_VISIBILITY_FILTER, filter})\n","import { connect } from 'react-redux'\nimport Header from '../components/Header'\nimport { addTodo } from '../actions'\n\nexport default connect(null, { addTodo })(Header)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nconst Link = ({ active, children, setFilter }) =>\n  (\n    // eslint-disable-next-line jsx-a11y/anchor-is-valid\n    <a\n      className={classnames({ selected: active })}\n      style={{ cursor: 'pointer' }}\n      onClick={() => setFilter()}\n    >\n      {children}\n    </a>\n  )\n\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  setFilter: PropTypes.func.isRequired\n}\n\nexport default Link\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n","export const SHOW_ALL = 'show_all'\nexport const SHOW_COMPLETED = 'show_completed'\nexport const SHOW_ACTIVE = 'show_active'\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FilterLink from '../containers/FilterLink'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed'\n}\n\nconst Footer = (props) => {\n  const { activeCount, completedCount, onClearCompleted } = props\n  const itemWord = activeCount === 1 ? 'item' : 'items'\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter =>\n          <li key={filter}>\n            <FilterLink filter={filter}>\n              {FILTER_TITLES[filter]}\n            </FilterLink>\n          </li>\n        )}\n      </ul>\n      {\n        !!completedCount &&\n        <button\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >Clear completed</button>\n        \n      }\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport TodoTextInput from './TodoTextInput'\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired\n  }\n\n  state = {\n    editing: false\n  }\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true })\n  }\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id)\n    } else {\n      this.props.editTodo(id, text)\n    }\n    this.setState({ editing: false })\n  }\n\n  render() {\n    const { todo, completeTodo, deleteTodo } = this.props\n\n    let element\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput text={todo.text}\n                       editing={this.state.editing}\n                       onSave={(text) => this.handleSave(todo.id, text)} />\n      )\n    } else {\n      element = (\n        <div className=\"view\">\n          <input className=\"toggle\"\n                 type=\"checkbox\"\n                 checked={todo.completed}\n                 onChange={() => completeTodo(todo.id)} />\n          <label onDoubleClick={this.handleDoubleClick}>\n            {todo.text}\n          </label>\n          <button className=\"destroy\"\n                  onClick={() => deleteTodo(todo.id)} />\n        </div>\n      )\n    }\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: this.state.editing\n      })}>\n        {element}\n      </li>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ filteredTodos, actions }) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo =>\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default TodoList\n","import { createSelector } from 'reselect'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst getVisibilityFilter = state => state.visibilityFilter\nconst getTodos = state => state.todos\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos\n      case SHOW_COMPLETED:\n        return todos.filter(t => t.completed)\n      case SHOW_ACTIVE:\n        return todos.filter(t => !t.completed)\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter)\n    }\n  }\n)\n\nexport const getCompletedTodoCount = createSelector(\n  [getTodos],\n  todos => (\n    todos.reduce((count, todo) =>\n      todo.completed ? count + 1 : count,\n      0\n    )\n  )\n)","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as TodoActions from '../actions'\nimport TodoList from '../components/TodoList'\nimport { getVisibleTodos } from '../selectors'\n\nconst mapStateToProps = state => ({\n  filteredTodos: getVisibleTodos(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Footer from './Footer'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst MainSection = ({ todosCount, completedCount, actions }) =>\n  (\n    <section className=\"main\">\n      {\n        !!todosCount && \n        <span>\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completedCount === todosCount}\n            readOnly\n          />\n          <label onClick={actions.completeAllTodos}/>\n        </span>\n      }\n      <VisibleTodoList />\n      {\n        !!todosCount &&\n        <Footer\n          completedCount={completedCount}\n          activeCount={todosCount - completedCount}\n          onClearCompleted={actions.clearCompleted}\n        />\n      }\n    </section>\n  )\n\nMainSection.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default MainSection;","import { connect } from 'react-redux'\nimport * as TodoActions from '../actions'\nimport { bindActionCreators } from 'redux'\nimport MainSection from '../components/MainSection'\nimport { getCompletedTodoCount } from '../selectors'\n\n\nconst mapStateToProps = state => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state)\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainSection)\n\n","import React from 'react'\nimport Header from '../containers/Header'\nimport MainSection from '../containers/MainSection'\n\nconst App = () => (\n  <div>\n    <Header />\n    <MainSection />\n  </div>\n)\n\nexport default App\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED\n} from '../constants/ActionTypes'\n\nconst initialState = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0\n  }\n]\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text\n        }\n      ]\n\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.id\n      )\n\n    case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, text: action.text } :\n          todo\n      )\n\n    case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, completed: !todo.completed } :\n          todo\n      )\n\n    case COMPLETE_ALL_TODOS:\n      const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked\n      }))\n\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false)\n\n    default:\n      return state\n  }\n}\n","import { SET_VISIBILITY_FILTER } from '../constants/ActionTypes'\nimport { SHOW_ALL } from '../constants/TodoFilters'\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nconst rootReducer = combineReducers({\n  todos,\n  visibilityFilter\n})\n\nexport default rootReducer\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\nimport 'todomvc-app-css/index.css'\n\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}